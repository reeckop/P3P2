package GUI.Consultas;

import Entidades.Consulta;
import Persistencia.IPersistenciaFachada;
import Persistencia.PersistenciaFachada;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Ricardo
 */
public class ConsultasMedicoPanel extends javax.swing.JPanel {

    private IPersistenciaFachada persistencia;
    /**
     * Creates new form ConsultasMedicoPanel
     */
    public ConsultasMedicoPanel() {
        initComponents();
        persistencia = new PersistenciaFachada();
        try {
            cargarConsultas(persistencia.listarConsultas(), jTable1);
        } catch (Exception ex) {
            Logger.getLogger(ConsultasMedicoPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Consultar Medico");

        jLabel2.setText("ID del Medico");

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String idText = jTextField1.getText().trim();
    
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Por favor ingrese un ID de paciente", 
                "Campo vacío", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int idPaciente = Integer.parseInt(idText);
            cargarConsultaMedicoPorID(idPaciente, jTable1);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "El ID debe ser un número válido", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar las consultas:\n" + ex.getMessage(), 
                "Error del sistema", 
                JOptionPane.ERROR_MESSAGE);
            // Limpiar tabla en caso de error
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cargarConsultas(List<Consulta> consultas, JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        model.setColumnIdentifiers(new String[]{"ID","Nombre Paciente","Nombre Medico","Fecha"});
        
        for (Consulta c : consultas) {
            model.addRow(new Object[]{c.getId(), 
                c.getPaciente().getNombre(), 
                c.getMedico().getNombre(), 
                c.getFecha()});
            System.out.println("ID: "+c.getId()+
                    "Nombre Paciente: "+c.getPaciente().getNombre()+
                    c.getMedico().getNombre()+"Fecha: "+c.getFecha());
        }
    }
    
    private void cargarConsultaMedicoPorID(int id, JTable table) throws Exception{
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        model.setColumnIdentifiers(new String[]{"Campo", "Datos"});

        try {
            Consulta c = persistencia.obtenerConsultaPorIdMedico(id);

            if (c == null) {
                JOptionPane.showMessageDialog(table, 
                    "No se encontró consulta para el paciente con ID: " + id, 
                    "Sin resultados", 
                    JOptionPane.INFORMATION_MESSAGE);
                model.addRow(new Object[]{"Información", "No se encontraron datos"});
                return;
            }

            // Datos de la consulta
            model.addRow(new Object[]{"ID Consulta", c.getId()});
            model.addRow(new Object[]{"Fecha", c.getFecha()});

            // Datos del paciente
            if (c.getPaciente() != null) {
                model.addRow(new Object[]{"ID Paciente", c.getPaciente().getId()});
                model.addRow(new Object[]{"Nombre Paciente", c.getPaciente().getNombre()});
                model.addRow(new Object[]{"Edad Paciente", c.getPaciente().getEdad()});
                model.addRow(new Object[]{"Dirección Paciente", c.getPaciente().getDireccion()});
            } else {
                JOptionPane.showMessageDialog(table, 
                    "Advertencia: No hay información del paciente asociada a esta consulta", 
                    "Datos incompletos", 
                    JOptionPane.WARNING_MESSAGE);
            }

            // Datos del médico
            if (c.getMedico() != null) {
                model.addRow(new Object[]{"ID Médico", c.getMedico().getId()});
                model.addRow(new Object[]{"Nombre Médico", c.getMedico().getNombre()});
                if (c.getMedico().getEspecialidad() != null) {
                    model.addRow(new Object[]{"Especialidad", c.getMedico().getEspecialidad().getNombre()});
                } else {
                    model.addRow(new Object[]{"Especialidad", "No especificada"});
                }
            } else {
                JOptionPane.showMessageDialog(table, 
                    "Advertencia: No hay información del médico asociada a esta consulta", 
                    "Datos incompletos", 
                    JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(table, 
                "Error grave al cargar los datos:\n" + ex.getMessage(), 
                "Error crítico", 
                JOptionPane.ERROR_MESSAGE);
            model.addRow(new Object[]{"Error", "No se pudieron cargar los datos"});
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
